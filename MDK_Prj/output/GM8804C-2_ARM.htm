<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\GM8804C-2_ARM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\GM8804C-2_ARM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Sep 02 16:25:13 2015
<BR><P>
<H3>Maximum Stack Usage =        608 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; WorkStateDeal &rArr; Key_StopState &rArr; Key_DebugState &rArr; Debug_UartJudgeDeal &rArr; Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[30]">Vectors</a>
 <LI><a href="#[2e]">Reset_Handler</a>
 <LI><a href="#[24b]">__user_initial_stackheap</a>
 <LI><a href="#[8]">DAbtHandler</a>
 <LI><a href="#[a]">FIQHandler</a>
 <LI><a href="#[9]">IRQHandler</a>
 <LI><a href="#[b]">T0TIMIIRQHandler</a>
 <LI><a href="#[c]">FLASHIRQHandler</a>
 <LI><a href="#[d]">RCCUIRQHandler</a>
 <LI><a href="#[e]">RTCIRQHandler</a>
 <LI><a href="#[f]">WDGIRQHandler</a>
 <LI><a href="#[10]">XTIIRQHandler</a>
 <LI><a href="#[11]">USBHPIRQHandler</a>
 <LI><a href="#[12]">I2C0ITERRIRQHandler</a>
 <LI><a href="#[13]">I2C1ITERRIRQHandler</a>
 <LI><a href="#[14]">UART0IRQHandler</a>
 <LI><a href="#[15]">UART1IRQHandler</a>
 <LI><a href="#[16]">UART2IRQHandler</a>
 <LI><a href="#[17]">UART3IRQHandler</a>
 <LI><a href="#[18]">BSPI0IRQHandler</a>
 <LI><a href="#[19]">BSPI1IRQHandler</a>
 <LI><a href="#[1a]">I2C0IRQHandler</a>
 <LI><a href="#[1b]">I2C1IRQHandler</a>
 <LI><a href="#[1c]">CANIRQHandler</a>
 <LI><a href="#[1d]">ADC12IRQHandler</a>
 <LI><a href="#[1e]">T1TIMIIRQHandler</a>
 <LI><a href="#[1f]">T2TIMIIRQHandler</a>
 <LI><a href="#[20]">T3TIMIIRQHandler</a>
 <LI><a href="#[21]">HDLCIRQHandler</a>
 <LI><a href="#[22]">USBLPIRQHandler</a>
 <LI><a href="#[23]">T0TOIIRQHandler</a>
 <LI><a href="#[24]">T0OC1IRQHandler</a>
 <LI><a href="#[25]">T0OC2IRQHandler</a>
 <LI><a href="#[7]">PAbtHandler</a>
 <LI><a href="#[6]">SWIHandler</a>
 <LI><a href="#[5]">UndefHandler</a>
 <LI><a href="#[2d]">ReturnAddress</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1be]">Save_SumData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[da]">ClrSum</a><BR>
 <LI><a href="#[118]">RunStopInit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[120]">Clr_Alarm</a><BR>
 <LI><a href="#[230]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[230]">Abort_Handler</a><BR>
 <LI><a href="#[22f]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22f]">Prefetch_Handler</a><BR>
 <LI><a href="#[22e]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22e]">Undefined_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC12IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[18]">BSPI0IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[19]">BSPI1IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[29]">BuildCrc16</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[2b]">BuildLrc</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[1c]">CANIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[28]">CheckModBusCrc16</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[16f]">CheckModbusLrc</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[8]">DAbtHandler</a> from dabt.o(DAbt) referenced from str71x.o(Reset)
 <LI><a href="#[a]">FIQHandler</a> from fiq.o(FIQ) referenced from str71x.o(Reset)
 <LI><a href="#[c]">FLASHIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[21]">HDLCIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[1a]">I2C0IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[12]">I2C0ITERRIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[1b]">I2C1IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[13]">I2C1ITERRIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[9]">IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[2c]">Modbus_Send_ASCII</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[2a]">Modbus_Send_RTU</a> from modbus.o(.text) referenced from modbus.o(.text)
 <LI><a href="#[7]">PAbtHandler</a> from pabt.o(PAbt) referenced from str71x.o(Reset)
 <LI><a href="#[d]">RCCUIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[e]">RTCIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[2e]">Reset_Handler</a> from str71x.o(Reset) referenced from str71x.o(Reset)
 <LI><a href="#[2d]">ReturnAddress</a> from irq.o(IRQ) referenced from irq.o(IRQ)
 <LI><a href="#[6]">SWIHandler</a> from swi.o(SWI) referenced from str71x.o(Reset)
 <LI><a href="#[24]">T0OC1IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[25]">T0OC2IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[b]">T0TIMIIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[23]">T0TOIIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[1e]">T1TIMIIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[1f]">T2TIMIIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[20]">T3TIMIIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[14]">UART0IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[15]">UART1IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[16]">UART2IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[17]">UART3IRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[11]">USBHPIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[22]">USBLPIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[5]">UndefHandler</a> from undef.o(Undef) referenced from str71x.o(Reset)
 <LI><a href="#[f]">WDGIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[10]">XTIIRQHandler</a> from irq.o(IRQ) referenced from str71x.o(Reset)
 <LI><a href="#[2f]">__main</a> from __main.o(!!!main) referenced from str71x.o(Reset)
 <LI><a href="#[27]">main</a> from main.o(.text) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[30]"></a>Vectors</STRONG> (ARM, 4 bytes, Stack size unknown bytes, str71x.o(Reset), UNUSED, KEPT)

<P><STRONG><a name="[2e]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, str71x.o(Reset))

<P><STRONG><a name="[2f]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[28c]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[28d]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[28e]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[28f]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[290]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[291]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[292]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[34]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[293]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[294]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[295]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[296]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[297]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[298]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[299]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[29a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[29b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[29c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[29d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[29e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[29f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2a0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2a1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2a2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2a3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2a4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[3d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[2a5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2a6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[2a7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2a8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2a9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[2aa]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[32]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2ab]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[2ad]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[24d]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[2ae]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[1e0]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandom (via Veneer)
</UL>

<P><STRONG><a name="[8f]"></a>PrintCodeFun</STRONG> (ARM, 304 bytes, Stack size 20 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
</UL>

<P><STRONG><a name="[40]"></a>RCCU_Config</STRONG> (ARM, 76 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RCCU_Config &rArr; RCCU_PLL1Config &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_RCLKSourceConfig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_PLL1Config
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_PCLK2Config
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_PCLK1Config
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_MCLKConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FlagStatus
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Div2Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[48]"></a>Flash_All3t</STRONG> (ARM, 396 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = Flash_All3t &rArr; Reset_Parameter &rArr; Key_ResetState &rArr; Reset_All &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FillDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_GetFedVal
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[55]"></a>System_Init</STRONG> (ARM, 376 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = System_Init &rArr; Flash_All3t &rArr; Reset_Parameter &rArr; Key_ResetState &rArr; Reset_All &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGrandShutCode
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_CheckExt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_PowerOn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APB_ClockConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>WorkStateDeal</STRONG> (ARM, 272 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = WorkStateDeal &rArr; Key_StopState &rArr; Key_DebugState &rArr; Debug_UartJudgeDeal &rArr; Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BatchState
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InScan
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>Disp_MainFun</STRONG> (ARM, 300 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Disp_MainFun &rArr; Disp_StopRunState &rArr; Disp_SumState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyMainDispArryToDispRam
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyFlgDispArryToDispRam
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyAuxDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DebugState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DateTimeState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BatchState
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>Lift_Push_Bag</STRONG> (ARM, 352 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
</UL>

<P><STRONG><a name="[8a]"></a>SpecialFun</STRONG> (ARM, 96 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlapBag
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscSumDeal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Pack
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConveyorDeal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lift_Push_Bag
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCodeFun
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (ARM, 84 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = main &rArr; WorkStateDeal &rArr; Key_StopState &rArr; Key_DebugState &rArr; Debug_UartJudgeDeal &rArr; Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutPut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commumication
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ConvertTimes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[1cf]"></a>Adapt_InitData</STRONG> (ARM, 124 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
</UL>

<P><STRONG><a name="[97]"></a>SaveSP2Value</STRONG> (ARM, 52 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveSP2Value &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
</UL>

<P><STRONG><a name="[98]"></a>SaveSP3Value</STRONG> (ARM, 52 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SaveSP3Value &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP3
</UL>

<P><STRONG><a name="[1cc]"></a>Adapt_InitSP3KTemp</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2Start
</UL>

<P><STRONG><a name="[9a]"></a>Adapt_InitSP2Temp</STRONG> (ARM, 28 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitDataFirstRun
</UL>

<P><STRONG><a name="[9b]"></a>Adapt_InitSP3Temp</STRONG> (ARM, 24 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitDataFirstRun
</UL>

<P><STRONG><a name="[99]"></a>Adapt_InitDataFirstRun</STRONG> (ARM, 36 bytes, Stack size 4 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Adapt_InitDataFirstRun
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitSP3Temp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitSP2Temp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>

<P><STRONG><a name="[a1]"></a>BubbleSort</STRONG> (ARM, 80 bytes, Stack size 8 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BubbleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushWtProbabilityStatistics
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushStdError
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FallWtProbabilityStatistics
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP3LinearKProbabilityStatistics
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2LinearKProbabilityStatistics
</UL>

<P><STRONG><a name="[9c]"></a>BubbleSortFloat</STRONG> (ARM, 104 bytes, Stack size 24 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BubbleSortFloat &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
</UL>

<P><STRONG><a name="[a0]"></a>SP2LinearKProbabilityStatistics</STRONG> (ARM, 332 bytes, Stack size 16 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SP2LinearKProbabilityStatistics &rArr; BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
</UL>

<P><STRONG><a name="[a4]"></a>SP2FluxProbabilityStatistics</STRONG> (ARM, 392 bytes, Stack size 24 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SP2FluxProbabilityStatistics &rArr; BubbleSortFloat &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSortFloat
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
</UL>

<P><STRONG><a name="[aa]"></a>SP3LinearKProbabilityStatistics</STRONG> (ARM, 380 bytes, Stack size 16 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SP3LinearKProbabilityStatistics &rArr; BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3ing
</UL>

<P><STRONG><a name="[ab]"></a>FallWtProbabilityStatistics</STRONG> (ARM, 348 bytes, Stack size 16 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = FallWtProbabilityStatistics &rArr; BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP3
</UL>

<P><STRONG><a name="[ac]"></a>ModifyFallWeight</STRONG> (ARM, 80 bytes, Stack size 16 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModifyFallWeight &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP3
</UL>

<P><STRONG><a name="[ad]"></a>Adapt_SP3</STRONG> (ARM, 192 bytes, Stack size 8 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Adapt_SP3 &rArr; SaveSP3Value &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFallWeight
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FallWtProbabilityStatistics
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitSP3Temp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSP3Value
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_Process
</UL>

<P><STRONG><a name="[1c4]"></a>SampleRushWt</STRONG> (ARM, 168 bytes, Stack size 8 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SampleRushWt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
</UL>

<P><STRONG><a name="[ae]"></a>RushStdError</STRONG> (ARM, 364 bytes, Stack size 24 bytes, adaptation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[af]"></a>RushWtProbabilityStatistics</STRONG> (ARM, 444 bytes, Stack size 32 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RushWtProbabilityStatistics &rArr; BubbleSort
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
</UL>

<P><STRONG><a name="[b0]"></a>ModifyRushWeight</STRONG> (ARM, 80 bytes, Stack size 16 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ModifyRushWeight &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
</UL>

<P><STRONG><a name="[b1]"></a>RushWtCompensate</STRONG> (ARM, 224 bytes, Stack size 32 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RushWtCompensate
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
</UL>

<P><STRONG><a name="[b2]"></a>Adapt_SP12</STRONG> (ARM, 788 bytes, Stack size 32 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Adapt_SP12 &rArr; SP2FluxProbabilityStatistics &rArr; BubbleSortFloat &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushWtCompensate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyRushWeight
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushWtProbabilityStatistics
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP3LinearKProbabilityStatistics
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2LinearKProbabilityStatistics
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitSP2Temp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSP2Value
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_Process
</UL>

<P><STRONG><a name="[b4]"></a>ClrPrintMessage</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adaptation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_Process
</UL>

<P><STRONG><a name="[b3]"></a>Adapt_Process</STRONG> (ARM, 80 bytes, Stack size 8 bytes, adaptation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Adapt_Process &rArr; Adapt_SP12 &rArr; SP2FluxProbabilityStatistics &rArr; BubbleSortFloat &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPrintMessage
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP3
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
</UL>

<P><STRONG><a name="[c5]"></a>AD_SCal0</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adtoweight.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[c7]"></a>TareAndWeight</STRONG> (ARM, 212 bytes, Stack size 8 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TareAndWeight
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[b5]"></a>AD_ADK</STRONG> (ARM, 52 bytes, Stack size 8 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD_ADK &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[b7]"></a>Clr0</STRONG> (ARM, 268 bytes, Stack size 24 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Clr0 &rArr; ErrorDeal &rArr; BuzzerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[c6]"></a>Trace0</STRONG> (ARM, 152 bytes, Stack size 8 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Trace0
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[ba]"></a>JudgeStable</STRONG> (ARM, 244 bytes, Stack size 24 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = JudgeStable &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToMv
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[bc]"></a>AdToWeight</STRONG> (ARM, 216 bytes, Stack size 24 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AdToWeight &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[ce]"></a>SmartT2b_SampleWt</STRONG> (ARM, 312 bytes, Stack size 32 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SmartT2b_SampleWt
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[bd]"></a>LinearFitting_SP2K</STRONG> (ARM, 196 bytes, Stack size 16 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LinearFitting_SP2K &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastLinear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[c2]"></a>JudgeWtOK</STRONG> (ARM, 56 bytes, Stack size 0 bytes, adtoweight.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp2Stop
</UL>

<P><STRONG><a name="[bf]"></a>Sp2WillStop</STRONG> (ARM, 220 bytes, Stack size 48 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Sp2WillStop &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundOff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastLinear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp2Stop
</UL>

<P><STRONG><a name="[c1]"></a>PredictSp2Stop</STRONG> (ARM, 204 bytes, Stack size 32 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = PredictSp2Stop &rArr; Sp2WillStop &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2StopTimeStart
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeWtOK
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[94]"></a>GetWt</STRONG> (ARM, 508 bytes, Stack size 32 bytes, adtoweight.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GetWt &rArr; PredictSp2Stop &rArr; Sp2WillStop &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1_filter
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveLinearArray
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp2Stop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearFitting_SP2K
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartT2b_SampleWt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToWeight
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr0
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ADK
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareAndWeight
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SCal0
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_GetFedVal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>GetMaxLinearK</STRONG> (ARM, 264 bytes, Stack size 24 bytes, adtoweight.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastLinear
</UL>

<P><STRONG><a name="[6f]"></a>Key_BatchState</STRONG> (ARM, 196 bytes, Stack size 24 bytes, batchstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Key_BatchState &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[81]"></a>Disp_BatchState</STRONG> (ARM, 64 bytes, Stack size 8 bytes, batchstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Disp_BatchState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_UnitDisp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[bb]"></a>AdToMv</STRONG> (ARM, 84 bytes, Stack size 0 bytes, calibstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDataInputCheck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WtOrMvData
</UL>

<P><STRONG><a name="[d5]"></a>MvToAd</STRONG> (ARM, 108 bytes, Stack size 8 bytes, calibstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MvToAd &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
</UL>

<P><STRONG><a name="[d7]"></a>CalDataInputCheck</STRONG> (ARM, 264 bytes, Stack size 4 bytes, calibstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CalDataInputCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToMv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
</UL>

<P><STRONG><a name="[d8]"></a>GetCalibItemValue</STRONG> (ARM, 168 bytes, Stack size 0 bytes, calibstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
</UL>

<P><STRONG><a name="[6e]"></a>Key_CalibState</STRONG> (ARM, 2088 bytes, Stack size 48 bytes, calibstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Key_CalibState &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadFloat
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalibItemValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDataInputCheck
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvToAd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundOff
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[7e]"></a>Disp_CalibState</STRONG> (ARM, 952 bytes, Stack size 40 bytes, calibstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Disp_CalibState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainSigDisp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_ZERO
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_STAB
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_UnitDisp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToMv
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[e2]"></a>Debug_UartInit</STRONG> (ARM, 512 bytes, Stack size 40 bytes, debugstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Debug_UartInit &rArr; Uart1_Init &rArr; UartGMInit_UART1 &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
</UL>

<P><STRONG><a name="[e4]"></a>Debug_UartJudgeDeal</STRONG> (ARM, 656 bytes, Stack size 40 bytes, debugstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = Debug_UartJudgeDeal &rArr; Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxdArry_To_TxdArry
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxData_Check
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
</UL>

<P><STRONG><a name="[76]"></a>Key_DebugState</STRONG> (ARM, 1196 bytes, Stack size 40 bytes, debugstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = Key_DebugState &rArr; Debug_UartJudgeDeal &rArr; Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SetupData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartJudgeDeal
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[83]"></a>Disp_DebugState</STRONG> (ARM, 304 bytes, Stack size 32 bytes, debugstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Disp_DebugState &rArr; Flash_MainDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[ea]"></a>Flash_Flg</STRONG> (ARM, 72 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
</UL>

<P><STRONG><a name="[e9]"></a>Disp_FlgLight</STRONG> (ARM, 568 bytes, Stack size 24 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disp_FlgLight &rArr; Feed_SP
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_UNDER
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_SUM
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_SP3
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_SP2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_SP1
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_RUN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_OVER
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_NZ
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_LOLIM
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_LO
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_HOLD
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_HILIM
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_HI
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_GO
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_FILL
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_DISC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_SP
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Flg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_ZERO
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_STAB
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
</UL>

<P><STRONG><a name="[fd]"></a>monthfromname</STRONG> (ARM, 120 bytes, Stack size 56 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = monthfromname &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
</UL>

<P><STRONG><a name="[100]"></a>Disp_Echo0</STRONG> (ARM, 52 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
</UL>

<P><STRONG><a name="[d2]"></a>Disp_Main_Data</STRONG> (ARM, 220 bytes, Stack size 24 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNBCD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Echo0
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BatchState
</UL>

<P><STRONG><a name="[101]"></a>Disp_VersionType</STRONG> (ARM, 824 bytes, Stack size 56 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Disp_VersionType &rArr; monthfromname &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_u32
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradeShutCodeEQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandom
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monthfromname
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGrandShutCode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
</UL>

<P><STRONG><a name="[4f]"></a>Key_Deal</STRONG> (ARM, 256 bytes, Stack size 16 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Key_Deal &rArr; VFD_ReadKey &rArr; VFD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReadKey
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
</UL>

<P><STRONG><a name="[91]"></a>Disp_Version</STRONG> (ARM, 248 bytes, Stack size 24 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Disp_Version &rArr; ModelSet &rArr; Key_ModelSetState &rArr; Key_T9Input &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>Disp_Aux_Rec</STRONG> (ARM, 84 bytes, Stack size 16 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Disp_Aux_Rec
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintState
</UL>

<P><STRONG><a name="[108]"></a>Key_T9Input</STRONG> (ARM, 428 bytes, Stack size 168 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Key_T9Input &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
</UL>

<P><STRONG><a name="[d0]"></a>Key_NumInput</STRONG> (ARM, 488 bytes, Stack size 8 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Key_NumInput
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BatchState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
</UL>

<P><STRONG><a name="[d9]"></a>Key_IncInput</STRONG> (ARM, 32 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
</UL>

<P><STRONG><a name="[b8]"></a>ErrorDeal</STRONG> (ARM, 60 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ErrorDeal &rArr; BuzzerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr0
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_Under
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
</UL>

<P><STRONG><a name="[85]"></a>Disp_Error</STRONG> (ARM, 200 bytes, Stack size 16 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Disp_Error
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
</UL>

<P><STRONG><a name="[d3]"></a>Flash_MainDisp</STRONG> (ARM, 116 bytes, Stack size 16 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_MainDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DebugState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DateTimeState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BatchState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ResetState
</UL>

<P><STRONG><a name="[129]"></a>Flash_AuxDisp</STRONG> (ARM, 116 bytes, Stack size 16 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_AuxDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
</UL>

<P><STRONG><a name="[dd]"></a>Disp_InputCode</STRONG> (ARM, 280 bytes, Stack size 8 bytes, displayandkey.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disp_InputCode
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ResetState
</UL>

<P><STRONG><a name="[109]"></a>Disp_OnOff</STRONG> (ARM, 16 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[10a]"></a>Disp_FlapOnOff</STRONG> (ARM, 40 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
</UL>

<P><STRONG><a name="[10b]"></a>Disp_TareMode</STRONG> (ARM, 84 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[10c]"></a>Disp_GorNMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[10d]"></a>Disp_BaudRate</STRONG> (ARM, 404 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[10e]"></a>Disp_GSDType</STRONG> (ARM, 16 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[10f]"></a>Disp_ComMode</STRONG> (ARM, 96 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[110]"></a>Disp_FeedMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[111]"></a>Disp_ParityMode</STRONG> (ARM, 96 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[112]"></a>Disp_HiLo</STRONG> (ARM, 16 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[113]"></a>Disp_PrintType</STRONG> (ARM, 28 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[114]"></a>Disp_No2PackOffTwoSwitch</STRONG> (ARM, 28 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[115]"></a>Disp_PrintLanguage</STRONG> (ARM, 16 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[116]"></a>Disp_AdSamplingRate</STRONG> (ARM, 312 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[117]"></a>Disp_ExtType</STRONG> (ARM, 40 bytes, Stack size 0 bytes, displayandkey.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
</UL>

<P><STRONG><a name="[17a]"></a>IoDefPointerRefresh</STRONG> (ARM, 316 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IoDefData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
</UL>

<P><STRONG><a name="[128]"></a>GetIoAddr</STRONG> (ARM, 108 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[119]"></a>JSD_Init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>

<P><STRONG><a name="[118]"></a>RunStopInit</STRONG> (ARM, 700 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFastSetRec
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticSaveStartTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticClrStruct
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StabOver
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSD_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitDataFirstRun
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[120]"></a>Clr_Alarm</STRONG> (ARM, 212 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Clr_Alarm &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[8d]"></a>Deal_Pack</STRONG> (ARM, 324 bytes, Stack size 20 bytes, io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
</UL>

<P><STRONG><a name="[57]"></a>IO_Init</STRONG> (ARM, 528 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[122]"></a>IO_Outport</STRONG> (ARM, 488 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_Outport
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CloseOut
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutPut
</UL>

<P><STRONG><a name="[90]"></a>ConveyorDeal</STRONG> (ARM, 252 bytes, Stack size 8 bytes, io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
</UL>

<P><STRONG><a name="[124]"></a>SmallDropOut</STRONG> (ARM, 168 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SmallDropOut
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
</UL>

<P><STRONG><a name="[ef]"></a>Feed_SP</STRONG> (ARM, 108 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Feed_SP
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[123]"></a>Sp_Disc_State</STRONG> (ARM, 552 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sp_Disc_State &rArr; SmallDropOut
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallDropOut
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Feed_SP
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutPut
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_SendDataDeal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Read_CoilDeal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadStateflg
</UL>

<P><STRONG><a name="[96]"></a>IO_OutPut</STRONG> (ARM, 552 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IO_OutPut &rArr; Sp_Disc_State &rArr; SmallDropOut
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Outport
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>IO_Inport</STRONG> (ARM, 152 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_Inport
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InScan
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
</UL>

<P><STRONG><a name="[126]"></a>IO_CloseOut</STRONG> (ARM, 44 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_CloseOut &rArr; IO_Outport
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Outport
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
</UL>

<P><STRONG><a name="[73]"></a>Key_IoTestState</STRONG> (ARM, 1372 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Key_IoTestState &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Outport
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[7c]"></a>Disp_IoTestState</STRONG> (ARM, 320 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Disp_IoTestState &rArr; Flash_MainDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Inport
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FillDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[74]"></a>Key_IoDefState</STRONG> (ARM, 1292 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Key_IoDefState &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIoAddr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[7d]"></a>Disp_IoDefState</STRONG> (ARM, 268 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Disp_IoDefState &rArr; Flash_AuxDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AuxDisp
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[12d]"></a>PackInput</STRONG> (ARM, 240 bytes, Stack size 8 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PackInput
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[1a7]"></a>Pack_JD</STRONG> (ARM, 92 bytes, Stack size 0 bytes, io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
</UL>

<P><STRONG><a name="[1a8]"></a>Pack_SD</STRONG> (ARM, 200 bytes, Stack size 0 bytes, io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
</UL>

<P><STRONG><a name="[12a]"></a>NextRecNum</STRONG> (ARM, 100 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NextRecNum &rArr; FRAM_ReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[12e]"></a>ManualDisc</STRONG> (ARM, 52 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[12f]"></a>ManualSp3</STRONG> (ARM, 64 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[130]"></a>ManualSp123</STRONG> (ARM, 60 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[12b]"></a>IO_InDeal</STRONG> (ARM, 680 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IO_InDeal &rArr; Clr_Alarm &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSp123
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSp3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualDisc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackInput
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InScan
</UL>

<P><STRONG><a name="[131]"></a>DoubleLock</STRONG> (ARM, 176 bytes, Stack size 4 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DoubleLock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InScan
</UL>

<P><STRONG><a name="[6a]"></a>IO_InScan</STRONG> (ARM, 624 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = IO_InScan &rArr; IO_InDeal &rArr; Clr_Alarm &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleLock
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Inport
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[17b]"></a>kalman1_init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[c8]"></a>kalman1_filter</STRONG> (ARM, 200 bytes, Stack size 32 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kalman1_filter &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[2af]"></a>kalman2_init</STRONG> (ARM, 108 bytes, Stack size 8 bytes, kalman.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>kalman2_filter</STRONG> (ARM, 680 bytes, Stack size 64 bytes, kalman.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>

<P><STRONG><a name="[cd]"></a>SaveLinearArray</STRONG> (ARM, 44 bytes, Stack size 0 bytes, mathlogic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[be]"></a>LeastLinear</STRONG> (ARM, 596 bytes, Stack size 80 bytes, mathlogic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxLinearK
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinearFitting_SP2K
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3ing
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Sample
</UL>

<P><STRONG><a name="[136]"></a>DisableRecIRQ_UART0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
</UL>

<P><STRONG><a name="[138]"></a>DisableRecIRQ_UART1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
</UL>

<P><STRONG><a name="[139]"></a>EnableRecIRQ_UART0</STRONG> (ARM, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[13a]"></a>EnableRecIRQ_UART1</STRONG> (ARM, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
</UL>

<P><STRONG><a name="[13b]"></a>DisableSendIRQ_UART0</STRONG> (ARM, 44 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableSendIRQ_UART0
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[13c]"></a>DisableSendIRQ_UART1</STRONG> (ARM, 44 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DisableSendIRQ_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
</UL>

<P><STRONG><a name="[13d]"></a>EnableSendIRQ_UART0</STRONG> (ARM, 44 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableSendIRQ_UART0
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Send
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
</UL>

<P><STRONG><a name="[13e]"></a>EnableSendIRQ_UART1</STRONG> (ARM, 44 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EnableSendIRQ_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
</UL>

<P><STRONG><a name="[13f]"></a>UartModbusInit_UART0</STRONG> (ARM, 256 bytes, Stack size 16 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OnOffConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LoopBackConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART0
</UL>

<P><STRONG><a name="[149]"></a>UartModbusInit_UART1</STRONG> (ARM, 240 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UartModbusInit_UART1 &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OnOffConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LoopBackConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART1
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[14a]"></a>BuildModbusCrc16</STRONG> (ARM, 64 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuildModbusCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModBusCrc16
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildCrc16
</UL>

<P><STRONG><a name="[29]"></a>BuildCrc16</STRONG> (ARM, 40 bytes, Stack size 12 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BuildCrc16 &rArr; BuildModbusCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildModbusCrc16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>BuildModbusLrc</STRONG> (ARM, 44 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckModbusLrc
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildLrc
</UL>

<P><STRONG><a name="[2b]"></a>BuildLrc</STRONG> (ARM, 32 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuildLrc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildModbusLrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>CheckModBusCrc16</STRONG> (ARM, 80 bytes, Stack size 12 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckModBusCrc16 &rArr; BuildModbusCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildModbusCrc16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>Modbus_Send_RTU</STRONG> (ARM, 156 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Modbus_Send_RTU &rArr; EnableSendIRQ_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSendIRQ_UART1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSendIRQ_UART0
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART0
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>Modbus_Send_ASCII</STRONG> (ARM, 112 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Modbus_Send_ASCII &rArr; StartSend_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HextoASC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[15b]"></a>Modbus_Error</STRONG> (ARM, 68 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Read_Coil
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4Byte
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2Byte
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_Register
</UL>

<P><STRONG><a name="[159]"></a>ModBus_2BinBCD</STRONG> (ARM, 84 bytes, Stack size 4 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ModBus_2BinBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_RegisterDeal
</UL>

<P><STRONG><a name="[14e]"></a>Modbus_ReadStateflg</STRONG> (ARM, 648 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Modbus_ReadStateflg &rArr; Sp_Disc_State &rArr; SmallDropOut
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_RegisterDeal
</UL>

<P><STRONG><a name="[14f]"></a>Modbus_WtOrMvData</STRONG> (ARM, 140 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToMv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_SendDataDeal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_RegisterDeal
</UL>

<P><STRONG><a name="[150]"></a>week_day</STRONG> (ARM, 164 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = week_day &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_week
</UL>

<P><STRONG><a name="[152]"></a>Date_Time_Read</STRONG> (ARM, 392 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Date_Time_Read &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_RegisterDeal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Date
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_week
</UL>

<P><STRONG><a name="[154]"></a>get_week</STRONG> (ARM, 56 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = get_week &rArr; Date_Time_Read &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_day
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_RegisterDeal
</UL>

<P><STRONG><a name="[155]"></a>Date_Time_Write</STRONG> (ARM, 216 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Date_Time_Write &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDateTime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[157]"></a>Judge_Date</STRONG> (ARM, 108 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Judge_Date &rArr; Date_Time_Read &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[165]"></a>ModBus_Write_2ByteOk</STRONG> (ARM, 16 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2Byte
</UL>

<P><STRONG><a name="[158]"></a>ModBus_Read_RegisterDeal</STRONG> (ARM, 10188 bytes, Stack size 56 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ModBus_Read_RegisterDeal &rArr; get_week &rArr; Date_Time_Read &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_week
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WtOrMvData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_ReadStateflg
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_2BinBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_Register
</UL>

<P><STRONG><a name="[15a]"></a>ModBus_Read_Register</STRONG> (ARM, 80 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ModBus_Read_Register &rArr; ModBus_Read_RegisterDeal &rArr; get_week &rArr; Date_Time_Read &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_RegisterDeal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[15c]"></a>ModBus_Write_2ByteDeal</STRONG> (ARM, 5704 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIoAddr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Setup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Rec
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IoDef
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Cal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Parameter
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Parameter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Date
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2Byte
</UL>

<P><STRONG><a name="[164]"></a>ModBus_Write_2Byte</STRONG> (ARM, 108 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteOk
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[169]"></a>ModBus_Write_4ByteOk</STRONG> (ARM, 48 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModBus_Write_4ByteOk
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4Byte
</UL>

<P><STRONG><a name="[166]"></a>ModBus_Write_4ByteDeal</STRONG> (ARM, 2140 bytes, Stack size 48 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ModBus_Write_4ByteDeal &rArr; ClrSum_Rec &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvToAd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundOff
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToMv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum_Rec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4Byte
</UL>

<P><STRONG><a name="[168]"></a>ModBus_Write_4Byte</STRONG> (ARM, 140 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = ModBus_Write_4Byte &rArr; ModBus_Write_4ByteDeal &rArr; ClrSum_Rec &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteOk
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[16c]"></a>Deal8byteShift</STRONG> (ARM, 120 bytes, Stack size 4 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Deal8byteShift
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Read_Coil
</UL>

<P><STRONG><a name="[16a]"></a>Modbus_Read_CoilDeal</STRONG> (ARM, 784 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Modbus_Read_CoilDeal &rArr; Sp_Disc_State &rArr; SmallDropOut
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[16b]"></a>Modbus_Read_Coil</STRONG> (ARM, 320 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Modbus_Read_Coil &rArr; Modbus_Error
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal8byteShift
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[16e]"></a>ModBus_Write_CoilOk</STRONG> (ARM, 48 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ModBus_Write_CoilOk
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
</UL>

<P><STRONG><a name="[16d]"></a>Modbus_Write_CoilDeal</STRONG> (ARM, 1588 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Modbus_Write_CoilDeal &rArr; TareModeChange &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSp123
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSp3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualDisc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackInput
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_CoilOk
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[16f]"></a>CheckModbusLrc</STRONG> (ARM, 100 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckModbusLrc
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuildModbusLrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modbus.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>Com_Modbus</STRONG> (ARM, 640 bytes, Stack size 40 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxdArry_To_TxdArry
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCtoHex
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Read_Coil
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Read_CoilDeal
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4Byte
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2Byte
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Read_Register
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartJudgeDeal
</UL>

<P><STRONG><a name="[171]"></a>IRQ_ModbusRTU_UART0</STRONG> (ARM, 596 bytes, Stack size 40 bytes, modbus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TimeOutPeriodConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART0
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART0
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[174]"></a>IRQ_Modbus_RTU_UART1</STRONG> (ARM, 552 bytes, Stack size 32 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = IRQ_Modbus_RTU_UART1 &rArr; DisableSendIRQ_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TimeOutPeriodConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART1
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>Read_SetupData</STRONG> (ARM, 128 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_SetupData &rArr; FRAM_ContReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[175]"></a>Read_SumData</STRONG> (ARM, 148 bytes, Stack size 40 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Read_SumData &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumWt_u32
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read8Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[12c]"></a>Read_RecipeData</STRONG> (ARM, 84 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_RecipeData &rArr; FRAM_ContReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[178]"></a>Read_CalibData</STRONG> (ARM, 64 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_CalibData &rArr; FRAM_ContReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadFloat
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[179]"></a>Read_IoDefData</STRONG> (ARM, 180 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Read_IoDefData &rArr; FRAM_ContReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoDefPointerRefresh
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
</UL>

<P><STRONG><a name="[63]"></a>Init_Parameter</STRONG> (ARM, 800 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Init_Parameter &rArr; Read_SumData &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SetupData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IoDefData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CalibData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SumData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[15e]"></a>Reset_Cal</STRONG> (ARM, 64 bytes, Stack size 32 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Reset_Cal &rArr; FRAM_WriteFloat &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[15f]"></a>Reset_Setup</STRONG> (ARM, 140 bytes, Stack size 224 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Reset_Setup &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[160]"></a>Reset_Rec</STRONG> (ARM, 128 bytes, Stack size 200 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Reset_Rec &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[161]"></a>Reset_IoDef</STRONG> (ARM, 76 bytes, Stack size 328 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[17d]"></a>Reset_All</STRONG> (ARM, 220 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Reset_All &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Setup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Rec
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IoDef
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
</UL>

<P><STRONG><a name="[17e]"></a>Disp_Delay</STRONG> (ARM, 72 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Disp_Delay &rArr; VFD_WriteDispRamArry &rArr; VFD_WriteByte &rArr; VFD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
</UL>

<P><STRONG><a name="[17f]"></a>Key_ResetState</STRONG> (ARM, 428 bytes, Stack size 40 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Key_ResetState &rArr; Reset_All &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Delay
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Setup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Rec
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IoDef
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Cal
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
</UL>

<P><STRONG><a name="[180]"></a>Disp_ResetState</STRONG> (ARM, 160 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disp_ResetState &rArr; Flash_MainDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
</UL>

<P><STRONG><a name="[53]"></a>Reset_Parameter</STRONG> (ARM, 132 bytes, Stack size 24 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Reset_Parameter &rArr; Key_ResetState &rArr; Reset_All &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ResetState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
</UL>

<P><STRONG><a name="[162]"></a>Backup_Parameter</STRONG> (ARM, 124 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Backup_Parameter &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW_Backup
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[163]"></a>Reload_Parameter</STRONG> (ARM, 216 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Reload_Parameter &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[182]"></a>Key_BorRState</STRONG> (ARM, 480 bytes, Stack size 40 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Key_BorRState &rArr; Reload_Parameter &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Delay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Parameter
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
</UL>

<P><STRONG><a name="[183]"></a>Disp_BorRState</STRONG> (ARM, 260 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disp_BorRState &rArr; Flash_MainDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_ASCII
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_sDatetoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
</UL>

<P><STRONG><a name="[54]"></a>BorR_Parameter</STRONG> (ARM, 132 bytes, Stack size 24 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BorR_Parameter &rArr; Key_BorRState &rArr; Reload_Parameter &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
</UL>

<P><STRONG><a name="[186]"></a>Key_ModelSetState</STRONG> (ARM, 652 bytes, Stack size 40 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Key_ModelSetState &rArr; Key_T9Input &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_T9Input
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
</UL>

<P><STRONG><a name="[187]"></a>Disp_ModelSetState</STRONG> (ARM, 632 bytes, Stack size 24 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disp_ModelSetState &rArr; Disp_InputCode
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_UNDER
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_SUM
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_RUN
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_OVER
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_ZERO
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_STAB
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
</UL>

<P><STRONG><a name="[106]"></a>ModelSet</STRONG> (ARM, 132 bytes, Stack size 24 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ModelSet &rArr; Key_ModelSetState &rArr; Key_T9Input &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
</UL>

<P><STRONG><a name="[188]"></a>ErrorToAsc</STRONG> (ARM, 96 bytes, Stack size 16 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ErrorToAsc &rArr; BIN4toNASC_Point &rArr; BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
</UL>

<P><STRONG><a name="[192]"></a>UnitToAsc</STRONG> (ARM, 92 bytes, Stack size 0 bytes, printstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
</UL>

<P><STRONG><a name="[18a]"></a>PrtAutoDebug_Contents</STRONG> (ARM, 172 bytes, Stack size 24 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = PrtAutoDebug_Contents &rArr; BIN4toNASC_Point &rArr; BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>

<P><STRONG><a name="[18d]"></a>PrtAuto_Contents</STRONG> (ARM, 1792 bytes, Stack size 56 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PrtAuto_Contents &rArr; BIN4toNASC_Point &rArr; BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HextoASC
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>

<P><STRONG><a name="[190]"></a>PrtStatistic_Contents</STRONG> (ARM, 1012 bytes, Stack size 24 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = PrtStatistic_Contents &rArr; BIN4toNASC_Point &rArr; BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>

<P><STRONG><a name="[191]"></a>PrtRecReport_Contents</STRONG> (ARM, 1140 bytes, Stack size 64 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = PrtRecReport_Contents &rArr; RTC_TimeToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeToASC_Full
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateToASC_Full
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitToAsc
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorToAsc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>

<P><STRONG><a name="[195]"></a>PrtTotal_Contents</STRONG> (ARM, 584 bytes, Stack size 56 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = PrtTotal_Contents &rArr; RTC_TimeToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeToASC_Full
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateToASC_Full
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>

<P><STRONG><a name="[196]"></a>PrtRecSet_Contents</STRONG> (ARM, 1336 bytes, Stack size 88 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = PrtRecSet_Contents &rArr; RTC_TimeToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeToASC_Full
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateToASC_Full
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>

<P><STRONG><a name="[11e]"></a>PrintStart</STRONG> (ARM, 452 bytes, Stack size 36 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PrintStart
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[197]"></a>PrintDeal</STRONG> (ARM, 856 bytes, Stack size 40 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PrintDeal &rArr; PrtRecSet_Contents &rArr; RTC_TimeToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAutoDebug_Contents
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commumication
</UL>

<P><STRONG><a name="[198]"></a>PrintResult_Old</STRONG> (ARM, 380 bytes, Stack size 24 bytes, printstate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[199]"></a>SetPrintSumArry</STRONG> (ARM, 676 bytes, Stack size 40 bytes, printstate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSum
</UL>

<P><STRONG><a name="[19a]"></a>PrintSum</STRONG> (ARM, 220 bytes, Stack size 24 bytes, printstate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSumArry
</UL>

<P><STRONG><a name="[19b]"></a>PrintBlankRows</STRONG> (ARM, 120 bytes, Stack size 24 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PrintBlankRows &rArr; StartSend_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
</UL>

<P><STRONG><a name="[77]"></a>Key_PrintState</STRONG> (ARM, 576 bytes, Stack size 40 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Key_PrintState &rArr; NextRecNum &rArr; FRAM_ReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBlankRows
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[84]"></a>Disp_PrintState</STRONG> (ARM, 164 bytes, Stack size 16 bytes, printstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Disp_PrintState &rArr; Flash_AuxDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AuxDisp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Aux_Rec
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[64]"></a>Pbus_CheckExt</STRONG> (ARM, 116 bytes, Stack size 16 bytes, profibus_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Pbus_CheckExt
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[19c]"></a>UARTInit_Pbus</STRONG> (ARM, 212 bytes, Stack size 16 bytes, profibus_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UARTInit_Pbus &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GuardTimeConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OnOffConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LoopBackConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[19e]"></a>IRQ_Pbus</STRONG> (ARM, 228 bytes, Stack size 24 bytes, profibus_dp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ_Pbus
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>Pbus_Checksum</STRONG> (ARM, 48 bytes, Stack size 0 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveCheck
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_StartSend
</UL>

<P><STRONG><a name="[1a0]"></a>Pbus_StartSend</STRONG> (ARM, 116 bytes, Stack size 16 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Checksum
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_SendDataDeal
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Init
</UL>

<P><STRONG><a name="[1a2]"></a>Pbus_Init</STRONG> (ARM, 244 bytes, Stack size 16 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_StartSend
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Pbus_DP
</UL>

<P><STRONG><a name="[1a3]"></a>Pbus_SendDataDeal</STRONG> (ARM, 2552 bytes, Stack size 40 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_StartSend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_WtOrMvData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Send
</UL>

<P><STRONG><a name="[1a4]"></a>Pbus_Send</STRONG> (ARM, 360 bytes, Stack size 8 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_SendDataDeal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Pbus_DP
</UL>

<P><STRONG><a name="[1a5]"></a>Pbus_ReciveCheck</STRONG> (ARM, 228 bytes, Stack size 24 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Recive
</UL>

<P><STRONG><a name="[1a6]"></a>Pbus_ReciveDataDeal</STRONG> (ARM, 9172 bytes, Stack size 56 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSp123
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualSp3
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ManualDisc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_SD
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_JD
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackInput
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum_Rec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Recive
</UL>

<P><STRONG><a name="[1a9]"></a>Pbus_Recive</STRONG> (ARM, 124 bytes, Stack size 8 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Pbus_DP
</UL>

<P><STRONG><a name="[1aa]"></a>Com_Pbus_DP</STRONG> (ARM, 20 bytes, Stack size 8 bytes, profibus_dp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Recive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Init
</UL>

<P><STRONG><a name="[1ab]"></a>GetRecipeItemValue</STRONG> (ARM, 628 bytes, Stack size 0 bytes, recipe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
</UL>

<P><STRONG><a name="[1ad]"></a>GetRecipePort</STRONG> (ARM, 856 bytes, Stack size 0 bytes, recipe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFastSetRec
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
</UL>

<P><STRONG><a name="[1ac]"></a>RecDataInputCheck</STRONG> (ARM, 124 bytes, Stack size 0 bytes, recipe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
</UL>

<P><STRONG><a name="[71]"></a>Key_RecipeState</STRONG> (ARM, 1228 bytes, Stack size 40 bytes, recipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Key_RecipeState &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataInputCheck
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecipePort
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecipeItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[7a]"></a>Disp_RecipeState</STRONG> (ARM, 980 bytes, Stack size 40 bytes, recipe.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Disp_RecipeState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlapOnOff
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_UnitDisp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[1c9]"></a>RefreshDebugRec</STRONG> (ARM, 44 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleFeed
</UL>

<P><STRONG><a name="[11d]"></a>UpdateFastSetRec</STRONG> (ARM, 108 bytes, Stack size 24 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UpdateFastSetRec &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecipePort
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
</UL>

<P><STRONG><a name="[1ae]"></a>Over_Under</STRONG> (ARM, 220 bytes, Stack size 24 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Over_Under &rArr; ErrorDeal &rArr; BuzzerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT3
</UL>

<P><STRONG><a name="[11b]"></a>StatisticClrStruct</STRONG> (ARM, 36 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>

<P><STRONG><a name="[11c]"></a>StatisticSaveStartTime</STRONG> (ARM, 12 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>

<P><STRONG><a name="[1af]"></a>StatisticDeal</STRONG> (ARM, 952 bytes, Stack size 40 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = StatisticDeal &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
</UL>

<P><STRONG><a name="[1b5]"></a>PredictSp3_Restart</STRONG> (ARM, 32 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
</UL>

<P><STRONG><a name="[1b4]"></a>OneTareOver</STRONG> (ARM, 656 bytes, Stack size 32 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OneTareOver &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFastSetRec
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Restart
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT5
</UL>

<P><STRONG><a name="[1bc]"></a>Deal_WeighTime_Sum</STRONG> (ARM, 96 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
</UL>

<P><STRONG><a name="[1b6]"></a>CorrectFall</STRONG> (ARM, 396 bytes, Stack size 48 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = CorrectFall &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT3
</UL>

<P><STRONG><a name="[1ce]"></a>GetTare</STRONG> (ARM, 100 bytes, Stack size 12 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetTare
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
</UL>

<P><STRONG><a name="[1b7]"></a>NO2Wait</STRONG> (ARM, 188 bytes, Stack size 4 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NO2Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlapBag
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT5
</UL>

<P><STRONG><a name="[8c]"></a>FlapBag</STRONG> (ARM, 580 bytes, Stack size 36 bytes, runstate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NO2Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
</UL>

<P><STRONG><a name="[1b9]"></a>PackOff</STRONG> (ARM, 52 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT5
</UL>

<P><STRONG><a name="[1b8]"></a>WaitT5</STRONG> (ARM, 412 bytes, Stack size 8 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WaitT5 &rArr; OneTareOver &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOff
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NO2Wait
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1ba]"></a>Disc</STRONG> (ARM, 500 bytes, Stack size 32 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Disc &rArr; Sp_Disc_State &rArr; SmallDropOut
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp_Disc_State
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1bd]"></a>WaitPack</STRONG> (ARM, 92 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
</UL>

<P><STRONG><a name="[1bb]"></a>WaitT4</STRONG> (ARM, 872 bytes, Stack size 40 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WaitT4 &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_Process
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitPack
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PackOff
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NO2Wait
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_WeighTime_Sum
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1bf]"></a>WaitT3</STRONG> (ARM, 332 bytes, Stack size 32 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = WaitT3 &rArr; CorrectFall &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectFall
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_Under
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1c0]"></a>PredictSp3_Sample</STRONG> (ARM, 308 bytes, Stack size 24 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = PredictSp3_Sample &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundOff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastLinear
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
</UL>

<P><STRONG><a name="[1c6]"></a>PredictSp3_Control</STRONG> (ARM, 84 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
</UL>

<P><STRONG><a name="[11a]"></a>PredictSp3_Init</STRONG> (ARM, 88 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>

<P><STRONG><a name="[1c1]"></a>PredictSp3_KAverage</STRONG> (ARM, 104 bytes, Stack size 16 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PredictSp3_KAverage
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Calculate
</UL>

<P><STRONG><a name="[1c2]"></a>PredictSp3_Calculate</STRONG> (ARM, 116 bytes, Stack size 8 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = PredictSp3_Calculate &rArr; PredictSp3_KAverage
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_KAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
</UL>

<P><STRONG><a name="[1c3]"></a>SmallFeed</STRONG> (ARM, 428 bytes, Stack size 40 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SmallFeed &rArr; PredictSp3_Sample &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleRushWt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Calculate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Control
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Sample
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1c8]"></a>EnterSmallFeed</STRONG> (ARM, 120 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleFeed
</UL>

<P><STRONG><a name="[1c7]"></a>MiddleFeed</STRONG> (ARM, 272 bytes, Stack size 16 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MiddleFeed &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterSmallFeed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDebugRec
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1ca]"></a>LargeFeed</STRONG> (ARM, 224 bytes, Stack size 16 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LargeFeed &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1cb]"></a>AutoStudy_SP2Start</STRONG> (ARM, 168 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitSP3KTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
</UL>

<P><STRONG><a name="[1d0]"></a>JudgeAutoStudy</STRONG> (ARM, 32 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
</UL>

<P><STRONG><a name="[1cd]"></a>WaitT1</STRONG> (ARM, 1868 bytes, Stack size 40 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WaitT1 &rArr; GetTare
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_InitData
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeAutoStudy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2Start
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterSmallFeed
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTare
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RefreshDebugRec
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1d6]"></a>AutoStudy_SP2ing</STRONG> (ARM, 80 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy
</UL>

<P><STRONG><a name="[1d1]"></a>AutoStudy_SP2Stop</STRONG> (ARM, 156 bytes, Stack size 24 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AutoStudy_SP2Stop &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy
</UL>

<P><STRONG><a name="[1d2]"></a>AutoStudy_SP3ing</STRONG> (ARM, 148 bytes, Stack size 16 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AutoStudy_SP3ing &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastLinear
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP3LinearKProbabilityStatistics
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy
</UL>

<P><STRONG><a name="[1d3]"></a>AutoStudy_SP3Stop</STRONG> (ARM, 164 bytes, Stack size 8 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AutoStudy_SP3Stop &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy
</UL>

<P><STRONG><a name="[1d4]"></a>AutoStudy_SP3Fill</STRONG> (ARM, 308 bytes, Stack size 16 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = AutoStudy_SP3Fill &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy
</UL>

<P><STRONG><a name="[1d5]"></a>AutoStudy</STRONG> (ARM, 64 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AutoStudy &rArr; AutoStudy_SP3ing &rArr; LeastLinear &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Stop
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3ing
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2Stop
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2ing
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
</UL>

<P><STRONG><a name="[1d7]"></a>Cmpul</STRONG> (ARM, 212 bytes, Stack size 8 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Cmpul &rArr; WaitT4 &rArr; RunStopInit &rArr;  Clr_Alarm (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeFeed
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleFeed
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT3
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT5
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
</UL>

<P><STRONG><a name="[6b]"></a>Key_RunState</STRONG> (ARM, 476 bytes, Stack size 40 bytes, runstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Key_RunState &rArr; Key_SumState &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmpul
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecipeItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[11f]"></a>StabOver</STRONG> (ARM, 8 bytes, Stack size 0 bytes, runstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
</UL>

<P><STRONG><a name="[1d8]"></a>Key_FastSetState</STRONG> (ARM, 492 bytes, Stack size 40 bytes, stopandrunstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Key_FastSetState &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecDataInputCheck
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecipePort
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
</UL>

<P><STRONG><a name="[6c]"></a>Key_StopState</STRONG> (ARM, 1144 bytes, Stack size 40 bytes, stopandrunstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Key_StopState &rArr; Key_DebugState &rArr; Debug_UartJudgeDeal &rArr; Com_Modbus &rArr; ModBus_Write_2Byte &rArr; ModBus_Write_2ByteDeal &rArr; Reset_IoDef &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CloseOut
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr_Alarm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToMv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_PrintState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BatchState
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecipeItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[79]"></a>Disp_StopRunState</STRONG> (ARM, 492 bytes, Stack size 40 bytes, stopandrunstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Disp_StopRunState &rArr; Disp_SumState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Flg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainSigDisp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_UnitDisp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_LEDDisp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_u32
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[1dc]"></a>GetSetupItemValue</STRONG> (ARM, 732 bytes, Stack size 0 bytes, setupstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
</UL>

<P><STRONG><a name="[1dd]"></a>GetSetupPort</STRONG> (ARM, 972 bytes, Stack size 4 bytes, setupstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetSetupPort
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
</UL>

<P><STRONG><a name="[1db]"></a>GetSetupNextItem</STRONG> (ARM, 204 bytes, Stack size 0 bytes, setupstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
</UL>

<P><STRONG><a name="[15d]"></a>TareModeChange</STRONG> (ARM, 64 bytes, Stack size 16 bytes, setupstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TareModeChange &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IoDefPointerRefresh
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[6d]"></a>Key_SetupState</STRONG> (ARM, 1900 bytes, Stack size 40 bytes, setupstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Key_SetupState &rArr; TareModeChange &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetupNextItem
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetupPort
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSetupItemValue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[7b]"></a>Disp_SetupState</STRONG> (ARM, 1048 bytes, Stack size 40 bytes, setupstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Disp_SetupState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ExtType
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_AdSamplingRate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintLanguage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_No2PackOffTwoSwitch
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintType
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_HiLo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ParityMode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FeedMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ComMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_GSDType
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BaudRate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_GorNMode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TareMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[177]"></a>GetSumWt_u32</STRONG> (ARM, 144 bytes, Stack size 24 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetSumWt_u32 &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SumData
</UL>

<P><STRONG><a name="[167]"></a>ClrSum_Rec</STRONG> (ARM, 64 bytes, Stack size 8 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ClrSum_Rec &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
</UL>

<P><STRONG><a name="[da]"></a>ClrSum</STRONG> (ARM, 104 bytes, Stack size 24 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumWt_u32
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum_Rec
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SumData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[1be]"></a>Save_SumData</STRONG> (ARM, 344 bytes, Stack size 48 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write8Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumWt_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DiscSumDeal
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
</UL>

<P><STRONG><a name="[72]"></a>Key_SumState</STRONG> (ARM, 1092 bytes, Stack size 40 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Key_SumState &rArr; ClrSum &rArr; Save_SumData &rArr;  ClrSum (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum_Rec
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RunState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[82]"></a>Disp_SumState</STRONG> (ARM, 536 bytes, Stack size 32 bytes, sum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Disp_SumState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FlgDisp_SUM
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_AuxDisp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Aux_Rec
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Echo0
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Flg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_UnitDisp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_LEDDisp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_u32
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[8b]"></a>DiscSumDeal</STRONG> (ARM, 232 bytes, Stack size 16 bytes, sum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialFun
</UL>

<P><STRONG><a name="[80]"></a>Disp_ShutdownState</STRONG> (ARM, 352 bytes, Stack size 32 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Disp_ShutdownState &rArr; Disp_Main_Data &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[1e2]"></a>GetShutItemValue</STRONG> (ARM, 44 bytes, Stack size 0 bytes, shutdownstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
</UL>

<P><STRONG><a name="[1e3]"></a>GetShutDownPort</STRONG> (ARM, 84 bytes, Stack size 0 bytes, shutdownstate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
</UL>

<P><STRONG><a name="[61]"></a>UpdataGrandShutCode</STRONG> (ARM, 392 bytes, Stack size 24 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UpdataGrandShutCode
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[102]"></a>GetRandom</STRONG> (ARM, 56 bytes, Stack size 8 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GetRandom &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
</UL>

<P><STRONG><a name="[103]"></a>GradeShutCodeEQ</STRONG> (ARM, 332 bytes, Stack size 16 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GradeShutCodeEQ
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
</UL>

<P><STRONG><a name="[1e1]"></a>Update_ShutDown_data</STRONG> (ARM, 240 bytes, Stack size 24 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Update_ShutDown_data &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
</UL>

<P><STRONG><a name="[75]"></a>Key_ShutdownState</STRONG> (ARM, 1184 bytes, Stack size 48 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Key_ShutdownState &rArr; Update_ShutDown_data &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradeShutCodeEQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandom
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IncInput
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGrandShutCode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ShutDown_data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShutDownPort
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetShutItemValue
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[92]"></a>Sys_Closed_Set</STRONG> (ARM, 236 bytes, Stack size 32 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Sys_Closed_Set &rArr; Key_ShutdownState &rArr; Update_ShutDown_data &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGrandShutCode
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e5]"></a>Count_Day</STRONG> (ARM, 160 bytes, Stack size 16 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Count_Day &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
</UL>

<P><STRONG><a name="[49]"></a>CmpDay</STRONG> (ARM, 600 bytes, Stack size 40 bytes, shutdownstate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = CmpDay &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_Day
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
</UL>

<P><STRONG><a name="[1e6]"></a>Auto_ShutDown</STRONG> (ARM, 216 bytes, Stack size 24 bytes, shutdownstate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_CloseOut
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_Str
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>

<P><STRONG><a name="[1e8]"></a>Input_DateTime</STRONG> (ARM, 40 bytes, Stack size 0 bytes, timeanddate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
</UL>

<P><STRONG><a name="[70]"></a>Key_DateTimeState</STRONG> (ARM, 644 bytes, Stack size 48 bytes, timeanddate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Key_DateTimeState &rArr; Key_ShutdownState &rArr; Update_ShutDown_data &rArr; FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_KeyCode_To_Value
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FrameTime
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FrameDate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Input_DateTime
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDateTime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
</UL>

<P><STRONG><a name="[7f]"></a>Disp_DateTimeState</STRONG> (ARM, 112 bytes, Stack size 8 bytes, timeanddate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Disp_DateTimeState &rArr; Flash_MainDisp
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_Str
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_MainDisp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_sTimetoASC
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_ASCII
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_sDatetoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[1ec]"></a>DebugInit_UART0</STRONG> (ARM, 204 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DebugInit_UART0 &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OnOffConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LoopBackConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
</UL>

<P><STRONG><a name="[66]"></a>Uart0_Init</STRONG> (ARM, 96 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Uart0_Init &rArr; DebugInit_UART0 &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1ed]"></a>UartGMInit_UART0</STRONG> (ARM, 252 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GuardTimeConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OnOffConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LoopBackConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>

<P><STRONG><a name="[1ee]"></a>UartGMInit_UART1</STRONG> (ARM, 236 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = UartGMInit_UART1 &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GuardTimeConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OnOffConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LoopBackConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[67]"></a>Uart1_Init</STRONG> (ARM, 152 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Uart1_Init &rArr; UartGMInit_UART1 &rArr; UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[1ef]"></a>SRCFrame</STRONG> (ARM, 128 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SRCFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CE
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT_O
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Cont
</UL>

<P><STRONG><a name="[1f0]"></a>SRCCheck</STRONG> (ARM, 152 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SRCCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxData_Check
</UL>

<P><STRONG><a name="[14d]"></a>StartSend_Com</STRONG> (ARM, 120 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartSend_Com
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxData_Check
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBlankRows
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSumArry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResult_Old
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAutoDebug_Contents
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_ASCII
</UL>

<P><STRONG><a name="[1f1]"></a>Com_Cont</STRONG> (ARM, 452 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read_R
</UL>

<P><STRONG><a name="[1f3]"></a>Debug_State1</STRONG> (ARM, 164 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_AD
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt
</UL>

<P><STRONG><a name="[1f4]"></a>Debug_State2</STRONG> (ARM, 32 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_AD
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt
</UL>

<P><STRONG><a name="[1f2]"></a>Debug_Com_Cont_Wt</STRONG> (ARM, 196 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_State2
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_State1
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1f5]"></a>Debug_Send</STRONG> (ARM, 112 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Debug_Send &rArr; EnableSendIRQ_UART0
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSendIRQ_UART0
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART0
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART0
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
</UL>

<P><STRONG><a name="[1f6]"></a>Debug_Com_Cont_Wt_Kalman</STRONG> (ARM, 316 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Debug_Com_Cont_Wt_Kalman &rArr; BIN4toNASC_Point &rArr; BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_State2
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_State1
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commumication
</UL>

<P><STRONG><a name="[1f7]"></a>Debug_Com_Cont_AD</STRONG> (ARM, 112 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_State2
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_State1
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
</UL>

<P><STRONG><a name="[1f8]"></a>Read_RT</STRONG> (ARM, 312 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCFrame
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read_R
</UL>

<P><STRONG><a name="[1f9]"></a>Read_RT_O</STRONG> (ARM, 152 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCFrame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read_R
</UL>

<P><STRONG><a name="[95]"></a>Commumication</STRONG> (ARM, 52 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Commumication &rArr; PrintDeal &rArr; PrtRecSet_Contents &rArr; RTC_TimeToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>RxdArry_To_TxdArry</STRONG> (ARM, 28 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartJudgeDeal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Read
</UL>

<P><STRONG><a name="[1fa]"></a>Read_CE</STRONG> (ARM, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_CE &rArr; SRCFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxData_Check
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read_R
</UL>

<P><STRONG><a name="[e7]"></a>RxData_Check</STRONG> (ARM, 144 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RxData_Check &rArr; SRCCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CE
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCCheck
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartJudgeDeal
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Read
</UL>

<P><STRONG><a name="[2b0]"></a>JudgeFrame</STRONG> (ARM, 44 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>Deal_Read_R</STRONG> (ARM, 252 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CE
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT_O
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Cont
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read
</UL>

<P><STRONG><a name="[1fc]"></a>Deal_Read</STRONG> (ARM, 48 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read_R
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CE
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Read
</UL>

<P><STRONG><a name="[1fd]"></a>Com_Read</STRONG> (ARM, 180 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxdArry_To_TxdArry
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxData_Check
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_Read
</UL>

<P><STRONG><a name="[1fe]"></a>IRQ_Debug_UART0</STRONG> (ARM, 436 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = IRQ_Debug_UART0 &rArr; DisableSendIRQ_UART0
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART0
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART0
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>IRQ_GM_ModbusASCII_UART0</STRONG> (ARM, 552 bytes, Stack size 32 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
</UL>

<P><STRONG><a name="[200]"></a>IRQ_GM_ModbusASCII_UART1</STRONG> (ARM, 524 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_GM_ModbusASCII_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteSend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ItConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FifoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>AD_SendByte</STRONG> (ARM, 116 bytes, Stack size 16 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SYNC
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReadReg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_WriteReg
</UL>

<P><STRONG><a name="[202]"></a>AD_ReceiveByte</STRONG> (ARM, 112 bytes, Stack size 16 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReadReg
</UL>

<P><STRONG><a name="[203]"></a>AD_WriteReg</STRONG> (ARM, 56 bytes, Stack size 16 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD_WriteReg &rArr; AD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[204]"></a>AD_ReadReg</STRONG> (ARM, 56 bytes, Stack size 16 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AD_ReadReg &rArr; AD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReceiveByte
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_GetFedVal
</UL>

<P><STRONG><a name="[205]"></a>AD_SYNC</STRONG> (ARM, 64 bytes, Stack size 8 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD_SYNC &rArr; AD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
</UL>

<P><STRONG><a name="[4e]"></a>AD_Init</STRONG> (ARM, 248 bytes, Stack size 16 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AD_Init &rArr; AD_ReadReg &rArr; AD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SYNC
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReadReg
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_WriteReg
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_GetFedVal
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[209]"></a>DEFSUMTab</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
</UL>

<P><STRONG><a name="[208]"></a>FilterTab</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
</UL>

<P><STRONG><a name="[207]"></a>DFNumberTab</STRONG> (ARM, 48 bytes, Stack size 0 bytes, ad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
</UL>

<P><STRONG><a name="[206]"></a>Ad_Filter</STRONG> (ARM, 268 bytes, Stack size 24 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ad_Filter &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DFNumberTab
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterTab
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEFSUMTab
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_GetFedVal
</UL>

<P><STRONG><a name="[51]"></a>AD_GetFedVal</STRONG> (ARM, 268 bytes, Stack size 32 bytes, ad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AD_GetFedVal &rArr; AD_Init &rArr; AD_ReadReg &rArr; AD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
</UL>

<P><STRONG><a name="[93]"></a>AD_ConvertTimes</STRONG> (ARM, 56 bytes, Stack size 0 bytes, ad.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>Buzzer_Init</STRONG> (ARM, 68 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buzzer_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5f]"></a>Buzzer_PowerOn</STRONG> (ARM, 48 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Buzzer_PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[20b]"></a>BuzzerS</STRONG> (ARM, 24 bytes, Stack size 8 bytes, buzzer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
</UL>

<P><STRONG><a name="[50]"></a>OPBuzzer</STRONG> (ARM, 160 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OPBuzzer
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Version
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSum
</UL>

<P><STRONG><a name="[b9]"></a>BuzzerStart</STRONG> (ARM, 60 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuzzerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorDeal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clr0
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commumication
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT1
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Over_Under
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Init
</UL>

<P><STRONG><a name="[5a]"></a>FRAM_Init</STRONG> (ARM, 76 bytes, Stack size 8 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FRAM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[20c]"></a>FRAM_SendByte</STRONG> (ARM, 112 bytes, Stack size 16 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadFloat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteByte
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadByte
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPNON
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write_SR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read_SR
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write8Byte
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW_Backup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read8Byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
</UL>

<P><STRONG><a name="[20d]"></a>FRAM_ReceiveByte</STRONG> (ARM, 104 bytes, Stack size 16 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadFloat
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadByte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read_SR
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read8Byte
</UL>

<P><STRONG><a name="[20e]"></a>FRAM_Read_SR</STRONG> (ARM, 68 bytes, Stack size 16 bytes, f_ram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>

<P><STRONG><a name="[20f]"></a>FRAM_Write_SR</STRONG> (ARM, 64 bytes, Stack size 16 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPNON
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
</UL>

<P><STRONG><a name="[210]"></a>FRAM_BPALL</STRONG> (ARM, 60 bytes, Stack size 8 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FRAM_BPALL &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write_SR
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteByte
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write8Byte
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW_Backup
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
</UL>

<P><STRONG><a name="[211]"></a>FRAM_BPNON</STRONG> (ARM, 60 bytes, Stack size 8 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FRAM_BPNON &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write_SR
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW_Backup
</UL>

<P><STRONG><a name="[212]"></a>FRAM_BPHALF</STRONG> (ARM, 60 bytes, Stack size 8 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write_SR
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteByte
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write8Byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
</UL>

<P><STRONG><a name="[4d]"></a>FRAM_ReadDW</STRONG> (ARM, 120 bytes, Stack size 16 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FRAM_ReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NextRecNum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SetupData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Parameter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IoDefData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CalibData
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SumData
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Parameter
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Parameter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[db]"></a>FRAM_ReadFloat</STRONG> (ARM, 120 bytes, Stack size 16 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FRAM_ReadFloat &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CalibData
</UL>

<P><STRONG><a name="[176]"></a>FRAM_Read8Byte</STRONG> (ARM, 156 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FRAM_Read8Byte &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SumData
</UL>

<P><STRONG><a name="[213]"></a>FRAM_ContReadByte</STRONG> (ARM, 112 bytes, Stack size 24 bytes, f_ram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>

<P><STRONG><a name="[62]"></a>FRAM_ContReadDW</STRONG> (ARM, 144 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FRAM_ContReadDW &rArr; FRAM_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecipeData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SetupData
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IoDefData
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CalibData
</UL>

<P><STRONG><a name="[65]"></a>FRAM_WriteDW</STRONG> (ARM, 160 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRAM_WriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFastSetRec
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InDeal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunStopInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSP3Value
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSP2Value
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_StopState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DebugState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BatchState
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ShutDown_data
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_FastSetState
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Stop
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleFeed
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectFall
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TareModeChange
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Setup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Rec
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IoDef
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reload_Parameter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrSum_Rec
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Parameter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Write_CoilDeal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[dc]"></a>FRAM_WriteFloat</STRONG> (ARM, 160 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRAM_WriteFloat &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Cal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[1de]"></a>FRAM_Write8Byte</STRONG> (ARM, 160 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRAM_Write8Byte &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_SumData
</UL>

<P><STRONG><a name="[181]"></a>FRAM_WriteDW_Backup</STRONG> (ARM, 160 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRAM_WriteDW_Backup &rArr; FRAM_BPNON &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPNON
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Parameter
</UL>

<P><STRONG><a name="[214]"></a>FRAM_ContWriteByte</STRONG> (ARM, 160 bytes, Stack size 24 bytes, f_ram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>

<P><STRONG><a name="[17c]"></a>FRAM_ContWriteDW</STRONG> (ARM, 192 bytes, Stack size 24 bytes, f_ram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FRAM_ContWriteDW &rArr; FRAM_BPHALF &rArr; FRAM_Write_SR &rArr; FRAM_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Setup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Rec
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IoDef
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Cal
</UL>

<P><STRONG><a name="[215]"></a>RTC_Send_Byte</STRONG> (ARM, 124 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
</UL>

<P><STRONG><a name="[216]"></a>RTC_Receive_Byte</STRONG> (ARM, 120 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
</UL>

<P><STRONG><a name="[217]"></a>RTC_Write_nByte</STRONG> (ARM, 136 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Write_nByte &rArr; RTC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDateTime
</UL>

<P><STRONG><a name="[218]"></a>RTC_Read_nByte</STRONG> (ARM, 132 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Receive_Byte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadTime
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>

<P><STRONG><a name="[59]"></a>RTC_Init</STRONG> (ARM, 116 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_Init &rArr; RTC_Write_nByte &rArr; RTC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[153]"></a>RTC_ReadDateTime</STRONG> (ARM, 44 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_ShutDown_data
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeToASC_Full
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateToASC_Full
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSumArry
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backup_Parameter
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Read
</UL>

<P><STRONG><a name="[219]"></a>RTC_ReadTime</STRONG> (ARM, 44 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
</UL>

<P><STRONG><a name="[2b1]"></a>UTRC_sTimetoDisp</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>RTC_sDatetoASC</STRONG> (ARM, 92 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DateTimeState
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateToASC_Full
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
</UL>

<P><STRONG><a name="[1eb]"></a>RTC_sTimetoASC</STRONG> (ARM, 92 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DateTimeState
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeToASC_Full
</UL>

<P><STRONG><a name="[193]"></a>RTC_DateToASC_Full</STRONG> (ARM, 112 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_DateToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_sDatetoASC
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
</UL>

<P><STRONG><a name="[194]"></a>RTC_TimeToASC_Full</STRONG> (ARM, 76 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTC_TimeToASC_Full &rArr; RTC_ReadDateTime &rArr; RTC_Read_nByte &rArr; RTC_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_sTimetoASC
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
</UL>

<P><STRONG><a name="[151]"></a>LeapYear</STRONG> (ARM, 72 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FrameDate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_Day
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Date
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_day
</UL>

<P><STRONG><a name="[1ea]"></a>RTC_FrameDate</STRONG> (ARM, 156 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RTC_FrameDate &rArr; LeapYear
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
</UL>

<P><STRONG><a name="[1e9]"></a>RTC_FrameTime</STRONG> (ARM, 112 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_FrameTime
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
</UL>

<P><STRONG><a name="[156]"></a>RTC_WriteDateTime</STRONG> (ARM, 16 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_WriteDateTime &rArr; RTC_Write_nByte &rArr; RTC_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Write
</UL>

<P><STRONG><a name="[21a]"></a>RTC_WriteDate</STRONG> (ARM, 32 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadTime
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
</UL>

<P><STRONG><a name="[5d]"></a>Timer0_Init</STRONG> (ARM, 184 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Timer0_Init &rArr; TIM_OCMPModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerValue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCMPModeConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterConfig
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClockSourceConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5e]"></a>Timer1_Init</STRONG> (ARM, 144 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Timer1_Init &rArr; TIM_OCMPModeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerValue
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCMPModeConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClockSourceConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelPriorityConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[c3]"></a>Sp2StopTimeStart</STRONG> (ARM, 68 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sp2StopTimeStart
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp2Stop
</UL>

<P><STRONG><a name="[223]"></a>Sp2StopTimeStop</STRONG> (ARM, 84 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_FlagClear
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>

<P><STRONG><a name="[225]"></a>StopSp2ByT1</STRONG> (ARM, 400 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StopSp2ByT1
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_IRQ
</UL>

<P><STRONG><a name="[226]"></a>T1_IRQ</STRONG> (ARM, 136 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = T1_IRQ &rArr; StopSp2ByT1
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_FlagClear
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSp2ByT1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EIC_IRQChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1TIMI_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>RoundOff</STRONG> (ARM, 28 bytes, Stack size 8 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = RoundOff
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_Sample
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
</UL>

<P><STRONG><a name="[2b2]"></a>ShortDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, userlib.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>MidDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, userlib.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>LongDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, userlib.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>delay</STRONG> (ARM, 40 bytes, Stack size 0 bytes, userlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_PowerOn
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerS
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Delay
</UL>

<P><STRONG><a name="[ff]"></a>BIN4toNBCD</STRONG> (ARM, 88 bytes, Stack size 16 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_u32
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_u32
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Echo0
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC
</UL>

<P><STRONG><a name="[229]"></a>HextoChar</STRONG> (ARM, 88 bytes, Stack size 0 bytes, userlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNHexASC
</UL>

<P><STRONG><a name="[228]"></a>BIN4toNHex</STRONG> (ARM, 80 bytes, Stack size 0 bytes, userlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNHexASC
</UL>

<P><STRONG><a name="[227]"></a>BIN4toNHexASC</STRONG> (ARM, 32 bytes, Stack size 12 bytes, userlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNHex
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HextoChar
</UL>

<P><STRONG><a name="[18f]"></a>BIN4toNASC</STRONG> (ARM, 60 bytes, Stack size 16 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC_Point
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSumArry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResult_Old
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
</UL>

<P><STRONG><a name="[18c]"></a>BIN4toNASC_Echo0</STRONG> (ARM, 112 bytes, Stack size 24 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BIN4toNASC_Echo0 &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT_O
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_AD
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAutoDebug_Contents
</UL>

<P><STRONG><a name="[189]"></a>BIN4toNASC_Point</STRONG> (ARM, 156 bytes, Stack size 16 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BIN4toNASC_Point &rArr; BIN4toNASC &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNASC
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT_O
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Cont
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAutoDebug_Contents
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorToAsc
</UL>

<P><STRONG><a name="[2b5]"></a>ASCto4Bin</STRONG> (ARM, 148 bytes, Stack size 12 bytes, userlib.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>ASCtoHex</STRONG> (ARM, 88 bytes, Stack size 4 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ASCtoHex
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Modbus
</UL>

<P><STRONG><a name="[14c]"></a>HextoASC</STRONG> (ARM, 104 bytes, Stack size 4 bytes, userlib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HextoASC
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_ASCII
</UL>

<P><STRONG><a name="[22a]"></a>VFD_SendByte</STRONG> (ARM, 136 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VFD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReadKey
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteByte
</UL>

<P><STRONG><a name="[22b]"></a>VFD_ReceiveByte</STRONG> (ARM, 164 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VFD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitRead
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReadKey
</UL>

<P><STRONG><a name="[22c]"></a>VFD_WriteByte</STRONG> (ARM, 56 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VFD_WriteByte &rArr; VFD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_Init
</UL>

<P><STRONG><a name="[5b]"></a>VFD_Init</STRONG> (ARM, 92 bytes, Stack size 8 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VFD_Init &rArr; VFD_WriteByte &rArr; VFD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[104]"></a>VFD_MainDisp_u32</STRONG> (ARM, 76 bytes, Stack size 8 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = VFD_MainDisp_u32 &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNBCD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
</UL>

<P><STRONG><a name="[e0]"></a>VFD_MainDisp_Str</STRONG> (ARM, 60 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ExtType
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_AdSamplingRate
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintLanguage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_No2PackOffTwoSwitch
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintType
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_HiLo
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ParityMode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FeedMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ComMode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_GSDType
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BaudRate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_GorNMode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_TareMode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlapOnOff
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_OnOff
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DebugState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSum
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ResetState
</UL>

<P><STRONG><a name="[185]"></a>VFD_MainDisp_ASCII</STRONG> (ARM, 40 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DateTimeState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
</UL>

<P><STRONG><a name="[1da]"></a>VFD_AuxDisp_u32</STRONG> (ARM, 76 bytes, Stack size 8 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = VFD_AuxDisp_u32 &rArr; BIN4toNBCD
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNBCD
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
</UL>

<P><STRONG><a name="[d1]"></a>VFD_AuxDisp_Str</STRONG> (ARM, 60 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_InputCode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_PrintState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DebugState
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_DateTimeState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BatchState
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BorRState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ResetState
</UL>

<P><STRONG><a name="[d4]"></a>VFD_UnitDisp</STRONG> (ARM, 124 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_RecipeState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_BatchState
</UL>

<P><STRONG><a name="[1d9]"></a>VFD_LEDDisp</STRONG> (ARM, 96 bytes, Stack size 4 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VFD_LEDDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
</UL>

<P><STRONG><a name="[127]"></a>VFD_FlgDisp</STRONG> (ARM, 296 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
</UL>

<P><STRONG><a name="[df]"></a>VFD_FlgDisp_ZERO</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[f0]"></a>VFD_FlgDisp_SP1</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[f7]"></a>VFD_FlgDisp_HILIM</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[de]"></a>VFD_FlgDisp_STAB</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[f1]"></a>VFD_FlgDisp_SP2</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[f8]"></a>VFD_FlgDisp_HI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[eb]"></a>VFD_FlgDisp_RUN</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[f2]"></a>VFD_FlgDisp_SP3</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[f9]"></a>VFD_FlgDisp_GO</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[ec]"></a>VFD_FlgDisp_SUM</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[f3]"></a>VFD_FlgDisp_DISC</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[fa]"></a>VFD_FlgDisp_LO</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[ed]"></a>VFD_FlgDisp_OVER</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[f4]"></a>VFD_FlgDisp_NZ</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[fb]"></a>VFD_FlgDisp_LOLIM</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[ee]"></a>VFD_FlgDisp_UNDER</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ModelSetState
</UL>

<P><STRONG><a name="[f5]"></a>VFD_FlgDisp_FILL</STRONG> (ARM, 20 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[fc]"></a>VFD_FlgDisp_HOLD</STRONG> (ARM, 28 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
</UL>

<P><STRONG><a name="[86]"></a>VFD_CopyMainDispArryToDispRam</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[87]"></a>VFD_CopyAuxDispArryToDispRam</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[22d]"></a>VFD_CopyUnitDispArryToDispRam</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
</UL>

<P><STRONG><a name="[88]"></a>VFD_CopyFlgDispArryToDispRam</STRONG> (ARM, 52 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyDispArryToDispRam
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
</UL>

<P><STRONG><a name="[89]"></a>VFD_CopyDispArryToDispRam</STRONG> (ARM, 24 bytes, Stack size 4 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VFD_CopyDispArryToDispRam
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyMainDispArryToDispRam
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyFlgDispArryToDispRam
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyAuxDispArryToDispRam
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_CopyUnitDispArryToDispRam
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Delay
</UL>

<P><STRONG><a name="[4b]"></a>VFD_WriteDispRamArry</STRONG> (ARM, 160 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VFD_WriteDispRamArry &rArr; VFD_WriteByte &rArr; VFD_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteByte
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SumState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ShutdownState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SetupState
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_RecipeState
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoTestState
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoDefState
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSum
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ModelSetState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_BorRState
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_ResetState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Delay
</UL>

<P><STRONG><a name="[4c]"></a>VFD_FillDispRam</STRONG> (ARM, 132 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = VFD_FillDispRam
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
</UL>

<P><STRONG><a name="[4a]"></a>VFD_ClrDispRam</STRONG> (ARM, 132 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VFD_ClrDispRam
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSet
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Parameter
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoTestState
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BorR_Parameter
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_MainFun
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_All3t
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSum
</UL>

<P><STRONG><a name="[105]"></a>VFD_ReadKey</STRONG> (ARM, 100 bytes, Stack size 16 bytes, vfd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VFD_ReadKey &rArr; VFD_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReceiveByte
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Deal
</UL>

<P><STRONG><a name="[e1]"></a>VFD_MainSigDisp</STRONG> (ARM, 64 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_CalibState
</UL>

<P><STRONG><a name="[1e7]"></a>VFD_KeyCode_To_Value</STRONG> (ARM, 120 bytes, Stack size 0 bytes, vfd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
</UL>

<P><STRONG><a name="[22e]"></a>Undefined_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UndefHandler
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>

<P><STRONG><a name="[252]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQHandler
</UL>

<P><STRONG><a name="[26a]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWIHandler
</UL>

<P><STRONG><a name="[22f]"></a>Prefetch_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbtHandler
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>

<P><STRONG><a name="[230]"></a>Abort_Handler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbtHandler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>

<P><STRONG><a name="[253]"></a>T0TIMI_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TIMIIRQHandler
</UL>

<P><STRONG><a name="[254]"></a>FLASH_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASHIRQHandler
</UL>

<P><STRONG><a name="[255]"></a>RCCU_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCUIRQHandler
</UL>

<P><STRONG><a name="[256]"></a>RTC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCIRQHandler
</UL>

<P><STRONG><a name="[257]"></a>WDG_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDGIRQHandler
</UL>

<P><STRONG><a name="[258]"></a>XTI_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTIIRQHandler
</UL>

<P><STRONG><a name="[259]"></a>USBHP_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHPIRQHandler
</UL>

<P><STRONG><a name="[25a]"></a>I2C0ITERR_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0ITERRIRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>I2C1ITERR_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1ITERRIRQHandler
</UL>

<P><STRONG><a name="[231]"></a>UART0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART0_IRQHandler &rArr; IRQ_Debug_UART0 &rArr; DisableSendIRQ_UART0
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0IRQHandler
</UL>

<P><STRONG><a name="[232]"></a>UART1_IRQHandler</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART1_IRQHandler &rArr; IRQ_Modbus_RTU_UART1 &rArr; DisableSendIRQ_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART1
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Pbus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1IRQHandler
</UL>

<P><STRONG><a name="[25c]"></a>UART2_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2IRQHandler
</UL>

<P><STRONG><a name="[25d]"></a>UART3_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>BSPI0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPI0IRQHandler
</UL>

<P><STRONG><a name="[25f]"></a>BSPI1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPI1IRQHandler
</UL>

<P><STRONG><a name="[260]"></a>I2C0_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0IRQHandler
</UL>

<P><STRONG><a name="[261]"></a>I2C1_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1IRQHandler
</UL>

<P><STRONG><a name="[262]"></a>CAN_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIRQHandler
</UL>

<P><STRONG><a name="[263]"></a>ADC12_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12IRQHandler
</UL>

<P><STRONG><a name="[233]"></a>T1TIMI_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = T1TIMI_IRQHandler &rArr; T1_IRQ &rArr; StopSp2ByT1
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1TIMIIRQHandler
</UL>

<P><STRONG><a name="[264]"></a>T2TIMI_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2TIMIIRQHandler
</UL>

<P><STRONG><a name="[265]"></a>T3TIMI_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T3TIMIIRQHandler
</UL>

<P><STRONG><a name="[266]"></a>HDLC_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLCIRQHandler
</UL>

<P><STRONG><a name="[267]"></a>USBLP_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLPIRQHandler
</UL>

<P><STRONG><a name="[268]"></a>T0TOI_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TOIIRQHandler
</UL>

<P><STRONG><a name="[234]"></a>T0OC1_IRQHandler</STRONG> (ARM, 72 bytes, Stack size 8 bytes, 71x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = T0OC1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_FlagClear
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC1IRQHandler
</UL>

<P><STRONG><a name="[269]"></a>T0OC2_IRQHandler</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 71x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC2IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>APB_ClockConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_apb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2b6]"></a>APB_SwResetConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_apb.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>EIC_Init</STRONG> (ARM, 88 bytes, Stack size 0 bytes, 71x_eic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[60]"></a>EIC_IRQConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 71x_eic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2b7]"></a>EIC_FIQConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>EIC_IRQChannelConfig</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 71x_eic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2StopTimeStart
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_IRQ
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2StopTimeStop
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[2b8]"></a>EIC_FIQChannelConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>EIC_IRQChannelPriorityConfig</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 71x_eic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[2b9]"></a>EIC_CurrentPriorityLevelConfig</STRONG> (ARM, 48 bytes, Stack size 4 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>EIC_CurrentPriorityLevelValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>EIC_CurrentIRQChannelValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>EIC_CurrentFIQChannelValue</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>EIC_FIQPendingBitClear</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_eic.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>GPIO_Config</STRONG> (ARM, 216 bytes, Stack size 0 bytes, 71x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_CheckExt
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_Init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Receive_Byte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Byte
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_BitRead</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Inport
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_FlgLight
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_CheckExt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_GetFedVal
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Receive_Byte
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReceiveByte
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Recive
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReceiveByte
</UL>

<P><STRONG><a name="[2be]"></a>GPIO_ByteRead</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2bf]"></a>GPIO_WordRead</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 71x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>GPIO_BitWrite</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 71x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Outport
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReadKey
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteFloat
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadFloat
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteDispRamArry
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReadDW
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadDW
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkStateDeal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSp2ByT1
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Read_nByte
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Write_nByte
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Receive_Byte
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Send_Byte
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteByte
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContReadByte
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPHALF
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPNON
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_BPALL
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write_SR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read_SR
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ReceiveByte
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_SendByte
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOn
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ReceiveByte
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_SendByte
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART0
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Send
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOff
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Write8Byte
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_WriteDW_Backup
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_Read8Byte
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FRAM_ContWriteDW
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modbus_Send_RTU
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_WriteByte
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ReceiveByte
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_SendByte
</UL>

<P><STRONG><a name="[2c0]"></a>GPIO_ByteWrite</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 71x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>GPIO_WordWrite</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 71x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>RCCU_Div2Config</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[235]"></a>RCCU_Div2Status</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
</UL>

<P><STRONG><a name="[42]"></a>RCCU_MCLKConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[43]"></a>RCCU_PCLK1Config</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[44]"></a>RCCU_PCLK2Config</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[236]"></a>RCCU_RCLKClockSource</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
</UL>

<P><STRONG><a name="[21f]"></a>RCCU_FrequencyValue</STRONG> (ARM, 324 bytes, Stack size 16 bytes, 71x_rccu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_RCLKClockSource
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Div2Status
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_PLL1Config
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateConfig
</UL>

<P><STRONG><a name="[45]"></a>RCCU_PLL1Config</STRONG> (ARM, 84 bytes, Stack size 8 bytes, 71x_rccu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RCCU_PLL1Config &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[2c2]"></a>RCCU_PLL2Config</STRONG> (ARM, 60 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>RCCU_PLL1Disable</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>RCCU_RCLKSourceConfig</STRONG> (ARM, 188 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[2c4]"></a>RCCU_USBCLKConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>RCCU_USBClockSource</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>RCCU_ITConfig</STRONG> (ARM, 28 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>RCCU_FlagStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_rccu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_Config
</UL>

<P><STRONG><a name="[2c7]"></a>RCCU_FlagClear</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>RCCU_ResetSource</STRONG> (ARM, 60 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>RCCU_PLL1FreeRunningModeConfig</STRONG> (ARM, 52 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>RCCU_PLL2Disable</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>RCCU_GenerateSWReset</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 71x_rccu.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>TIM_Init</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[21c]"></a>TIM_ClockSourceConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[2cc]"></a>TIM_ClockSourceValue</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>TIM_PrescalerConfig</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[21e]"></a>TIM_PrescalerValue</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[2cd]"></a>TIM_ClockLevelConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>TIM_ClockLevelValue</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>TIM_ICAPModeConfig</STRONG> (ARM, 60 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>TIM_ICAPValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>TIM_OCMPModeConfig</STRONG> (ARM, 132 bytes, Stack size 16 bytes, 71x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OCMPModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[2d1]"></a>TIM_OPModeConfig</STRONG> (ARM, 56 bytes, Stack size 4 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>TIM_PWMOModeConfig</STRONG> (ARM, 120 bytes, Stack size 8 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>TIM_PWMIModeConfig</STRONG> (ARM, 100 bytes, Stack size 4 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>TIM_PWMIValue</STRONG> (ARM, 32 bytes, Stack size 4 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>TIM_CounterConfig</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2StopTimeStart
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_IRQ
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2StopTimeStop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC1_IRQHandler
</UL>

<P><STRONG><a name="[221]"></a>TIM_ITConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[2d5]"></a>TIM_FlagStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>TIM_FlagClear</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 71x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1_IRQ
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2StopTimeStop
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC1_IRQHandler
</UL>

<P><STRONG><a name="[2d6]"></a>TIM_CounterValue</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 71x_tim.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>UART_Init</STRONG> (ARM, 40 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[238]"></a>UART_ModeConfig</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[237]"></a>UART_BaudRateConfig</STRONG> (ARM, 80 bytes, Stack size 16 bytes, 71x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[239]"></a>UART_ParityConfig</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[23a]"></a>UART_StopBitsConfig</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Config
</UL>

<P><STRONG><a name="[145]"></a>UART_Config</STRONG> (ARM, 68 bytes, Stack size 16 bytes, 71x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = UART_Config &rArr; UART_BaudRateConfig &rArr; RCCU_FrequencyValue
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StopBitsConfig
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ParityConfig
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[137]"></a>UART_ItConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART0
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_StartSend
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Pbus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSendIRQ_UART1
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableSendIRQ_UART0
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART1
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSendIRQ_UART0
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRecIRQ_UART0
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableRecIRQ_UART0
</UL>

<P><STRONG><a name="[143]"></a>UART_FifoConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[142]"></a>UART_FifoReset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART0
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_StartSend
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Pbus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSend_Com
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[144]"></a>UART_LoopBackConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[173]"></a>UART_TimeOutPeriodConfig</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
</UL>

<P><STRONG><a name="[19d]"></a>UART_GuardTimeConfig</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
</UL>

<P><STRONG><a name="[146]"></a>UART_RxConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[141]"></a>UART_OnOffConfig</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART1
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGMInit_UART0
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugInit_UART0
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit_Pbus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART1
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartModbusInit_UART0
</UL>

<P><STRONG><a name="[19f]"></a>UART_ByteSend</STRONG> (ARM, 52 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART0
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Pbus
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StringSend
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DataSend
</UL>

<P><STRONG><a name="[23d]"></a>UART_9BitByteSend</STRONG> (ARM, 56 bytes, Stack size 0 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_9BitDataSend
</UL>

<P><STRONG><a name="[23b]"></a>UART_DataSend</STRONG> (ARM, 56 bytes, Stack size 8 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteSend
</UL>

<P><STRONG><a name="[23c]"></a>UART_9BitDataSend</STRONG> (ARM, 56 bytes, Stack size 8 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_9BitByteSend
</UL>

<P><STRONG><a name="[23e]"></a>UART_StringSend</STRONG> (ARM, 56 bytes, Stack size 4 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteSend
</UL>

<P><STRONG><a name="[240]"></a>UART_ByteReceive</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DataReceive
</UL>

<P><STRONG><a name="[242]"></a>UART_9BitByteReceive</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_9BitDataReceive
</UL>

<P><STRONG><a name="[23f]"></a>UART_DataReceive</STRONG> (ARM, 68 bytes, Stack size 16 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteReceive
</UL>

<P><STRONG><a name="[241]"></a>UART_9BitDataReceive</STRONG> (ARM, 68 bytes, Stack size 16 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_9BitByteReceive
</UL>

<P><STRONG><a name="[243]"></a>UART_StringReceive</STRONG> (ARM, 64 bytes, Stack size 0 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StringReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StringReceive
</UL>

<P><STRONG><a name="[172]"></a>UART_FlagStatus</STRONG> (ARM, 8 bytes, Stack size 0 bytes, 71x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_GM_ModbusASCII_UART0
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Pbus
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
</UL>

<P><STRONG><a name="[244]"></a>SendChar</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 71x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ByteSend
</UL>

<P><STRONG><a name="[24b]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, str71x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastLinear
</UL>

<P><STRONG><a name="[245]"></a>_ll_sdiv</STRONG> (ARM, 84 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MvToAd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ad_Filter
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumWt_u32
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[2d7]"></a>_ll_udiv</STRONG> (ARM, 720 bytes, Stack size 24 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>srand</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandom (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[35]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxdArry_To_TxdArry
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_DateTimeState
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAutoDebug_Contents
</UL>

<P><STRONG><a name="[246]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2d9]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_T9Input
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monthfromname
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneTareOver
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Setup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Rec
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IoDef
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Cal
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_FillDispRam
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPrintSumArry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResult_Old
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecSet_Contents
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtTotal_Contents
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtRecReport_Contents
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartJudgeDeal
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_UartInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_ClrDispRam
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Delay
</UL>

<P><STRONG><a name="[248]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[247]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp2Stop
</UL>

<P><STRONG><a name="[2dd]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2df]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyRushWeight
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushStdError
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyFallWeight
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FallWtProbabilityStatistics
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP3LinearKProbabilityStatistics
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2LinearKProbabilityStatistics
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_day
</UL>

<P><STRONG><a name="[2e0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3b]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e3]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e4]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[2e5]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_MainDisp_u32
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GradeShutCodeEQ
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRandom
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIN4toNBCD
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Aux_Rec
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_VersionType
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_NumInput
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Main_Data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoundOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushWtCompensate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RushWtProbabilityStatistics
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FallWtProbabilityStatistics
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP3LinearKProbabilityStatistics
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2LinearKProbabilityStatistics
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdataGrandShutCode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SumState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShutdownState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_SetupState
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_IoDefState
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Error
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_FrequencyValue
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Debug_UART0
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT_O
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RT
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Com_Cont
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCCheck
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRCFrame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VFD_AuxDisp_u32
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PredictSp3_KAverage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectFall
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintResult_Old
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtStatistic_Contents
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAutoDebug_Contents
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeapYear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Modbus_RTU_UART1
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_ModbusRTU_UART0
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Date_Time_Write
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;week_day
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudRateConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC1_IRQHandler
</UL>

<P><STRONG><a name="[2e8]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>DAbtHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dabt.o(DAbt))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[a]"></a>FIQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fiq.o(FIQ))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[9]"></a>IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[b]"></a>T0TIMIIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TIMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[c]"></a>FLASHIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[d]"></a>RCCUIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCU_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[e]"></a>RTCIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[f]"></a>WDGIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[10]"></a>XTIIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[11]"></a>USBHPIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBHP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[12]"></a>I2C0ITERRIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0ITERR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[13]"></a>I2C1ITERRIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1ITERR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[14]"></a>UART0IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART0IRQHandler &rArr; UART0_IRQHandler &rArr; IRQ_Debug_UART0 &rArr; DisableSendIRQ_UART0
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[15]"></a>UART1IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART1IRQHandler &rArr; UART1_IRQHandler &rArr; IRQ_Modbus_RTU_UART1 &rArr; DisableSendIRQ_UART1
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[16]"></a>UART2IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[17]"></a>UART3IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[18]"></a>BSPI0IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[19]"></a>BSPI1IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1c]"></a>CANIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1d]"></a>ADC12IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC12_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1e]"></a>T1TIMIIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = T1TIMIIRQHandler &rArr; T1TIMI_IRQHandler &rArr; T1_IRQ &rArr; StopSp2ByT1
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1TIMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1f]"></a>T2TIMIIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2TIMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[20]"></a>T3TIMIIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T3TIMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[21]"></a>HDLCIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[22]"></a>USBLPIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBLP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[23]"></a>T0TOIIRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0TOI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[24]"></a>T0OC1IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = T0OC1IRQHandler &rArr; T0OC1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[25]"></a>T0OC2IRQHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T0OC2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[7]"></a>PAbtHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, pabt.o(PAbt))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[6]"></a>SWIHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, swi.o(SWI))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[5]"></a>UndefHandler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, undef.o(Undef))
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> str71x.o(Reset)
</UL>
<P><STRONG><a name="[1e4]"></a>BuzzerOff</STRONG> (ARM, 16 bytes, Stack size 0 bytes, shutdownstate.o(i.BuzzerOff))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Closed_Set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmpDay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_PowerOn
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerS
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Auto_ShutDown
</UL>

<P><STRONG><a name="[20a]"></a>BuzzerOn</STRONG> (ARM, 16 bytes, Stack size 0 bytes, buzzer.o(i.BuzzerOn))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerStart
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPBuzzer
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buzzer_PowerOn
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerS
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
</UL>

<P><STRONG><a name="[26b]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
</UL>

<P><STRONG><a name="[26f]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[270]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
</UL>

<P><STRONG><a name="[271]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2e9]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[2ea]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[273]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
</UL>

<P><STRONG><a name="[272]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
</UL>

<P><STRONG><a name="[274]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[26e]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[26d]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
</UL>

<P><STRONG><a name="[275]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
</UL>

<P><STRONG><a name="[277]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_fadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1_filter
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman2_filter
</UL>

<P><STRONG><a name="[279]"></a>_fadd</STRONG> (ARM, 196 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[27c]"></a>__fpl_fcheck_NaN1</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[284]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1_filter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToWeight
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ADK
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2Stop
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman2_filter
</UL>

<P><STRONG><a name="[27e]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_f2iz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSortFloat
</UL>

<P><STRONG><a name="[27f]"></a>_ffix</STRONG> (ARM, 68 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToWeight
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ADK
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
</UL>

<P><STRONG><a name="[280]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSortFloat
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWt
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2Stop
</UL>

<P><STRONG><a name="[2eb]"></a>_fflt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[282]"></a>__fflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fflt_noclz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffltu
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdToWeight
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeStable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD_ADK
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP2Stop
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeFeed
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleFeed
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
</UL>

<P><STRONG><a name="[281]"></a>_ffltu</STRONG> (ARM, 8 bytes, Stack size 0 bytes, fflt_noclz.o(x$fpl$ffltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fflt_normalise
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoStudy_SP3Fill
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LargeFeed
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MiddleFeed
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallFeed
</UL>

<P><STRONG><a name="[283]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[287]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1_filter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sp2WillStop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adapt_SP12
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Com_Cont_Wt_Kalman
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatisticDeal
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pbus_ReciveDataDeal
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrtAuto_Contents
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_2ByteDeal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman2_filter
</UL>

<P><STRONG><a name="[285]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[278]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
</UL>

<P><STRONG><a name="[27b]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSortFloat
</UL>

<P><STRONG><a name="[286]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_frsub</STRONG> (ARM, 0 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman1_filter
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman2_filter
</UL>

<P><STRONG><a name="[288]"></a>_frsb</STRONG> (ARM, 20 bytes, Stack size 0 bytes, faddsub_noclz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_fsub</STRONG> (ARM, 0 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kalman2_filter
</UL>

<P><STRONG><a name="[28a]"></a>_fsub</STRONG> (ARM, 304 bytes, Stack size 16 bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[27d]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[a7]"></a>__ARM_scalbnf</STRONG> (ARM, 92 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SP2FluxProbabilityStatistics
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CalibState
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_StopRunState
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitT4
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModBus_Write_4ByteDeal
</UL>

<P><STRONG><a name="[28b]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2d]"></a>ReturnAddress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, irq.o(IRQ))
<BR>[Address Reference Count : 1]<UL><LI> irq.o(IRQ)
</UL>
<P><STRONG><a name="[250]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24f]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[24e]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[251]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[276]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[26c]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[289]"></a>_fadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[27a]"></a>_fsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, faddsub_noclz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[24c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
